generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_CONNECTION_POOL_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Nft {
  id                            Int          @id @default(autoincrement())
  dropId                        Int
  name                          String
  description                   String
  rarity                        String
  ipfsPath                      String
  s3Path                        String
  tags                          String
  numberOfMints                 Int          @default(0)
  isVideo                       Boolean      @default(false)
  drop                          Drop         @relation(fields: [dropId], references: [id])
  Drop_Drop_defaultPrizeIdToNft Drop[]       @relation("Drop_defaultPrizeIdToNft")
  PrizeProof                    PrizeProof[]
}

model Drop {
  id                           Int       @id @default(autoincrement())
  bannerImageName              String
  dropDescription              String
  dropName                     String
  endTime                      String
  lotteryId                    Int
  prizeMetadataCid             String
  startTime                    String
  bannerImageIpfsPath          String
  bannerImageS3Path            String
  metadataIpfsPath             String
  metadataS3Path               String
  tags                         String
  approvedAt                   DateTime?
  approvedBy                   String?   @db.Char(42)
  blockchainCreatedAt          DateTime?
  costPerTicketCoins           Float     @default(0.0)
  costPerTicketPoints          BigInt    @default(0)
  createdAt                    DateTime  @default(now())
  createdBy                    String    @db.Char(42)
  defaultPrizeId               Int?
  isLive                       Boolean   @default(false)
  maxParticipants              Int       @default(0)
  royaltyPercentage            Float     @default(0.0)
  dropTileContentIpfsUrl       String
  dropTileContentS3Url         String
  User_Drop_approvedByToUser   User?     @relation("Drop_approvedByToUser", fields: [approvedBy], references: [walletAddress])
  User_Drop_createdByToUser    User      @relation("Drop_createdByToUser", fields: [createdBy], references: [walletAddress])
  Nft_Drop_defaultPrizeIdToNft Nft?      @relation("Drop_defaultPrizeIdToNft", fields: [defaultPrizeId], references: [id])
  Nft                          Nft[]
  User_userFavoriteDrops       User[]    @relation("userFavoriteDrops")
}

model PrizeProof {
  lotteryId     Int
  winnerAddress String    @db.Char(42)
  proof         String
  claimedAt     DateTime?
  createdAt     DateTime
  nftId         Int
  Nft           Nft       @relation(fields: [nftId], references: [id])

  @@id([lotteryId, winnerAddress, nftId])
}

model MemeTransactions {
  blockNumber    Int
  blockTimestamp Int
  from           String    @db.Char(42)
  to             String    @db.Char(42)
  value          String
  assetType      AssetType
  id             Int       @id @default(autoincrement())
  txHash         String    @db.Char(66)

  @@index([from, to])
}

model RewardPublished {
  address           String   @id @db.Char(42)
  totalPointsEarned BigInt   @default(0)
  proof             String
  updatedAt         DateTime @default(now())
}

model RewardType {
  type               AssetType @id
  rewardRate         Float
  lastBlockInspected Int
  chainId            Int
  contract           String    @db.Char(42)
  startingBlock      Int
  positionSizeLimit  String    @default("0")
}

model User {
  walletAddress              String   @id @db.Char(42)
  userName                   String?
  email                      String?  @unique
  createdAt                  DateTime @default(now())
  role                       Role     @default(USER)
  bio                        String?  @db.VarChar(200)
  profilePicture             String?
  Drop_Drop_approvedByToUser Drop[]   @relation("Drop_approvedByToUser")
  Drop_Drop_createdByToUser  Drop[]   @relation("Drop_createdByToUser")
  Drop_userFavoriteDrops     Drop[]   @relation("userFavoriteDrops")

  @@index([walletAddress])
}

enum AssetType {
  ETH_MEMEINU
  FTM_MEMEINU
  FTM_LIQUIDITY
}

enum Role {
  USER
  ARTIST
  ADMIN
}
